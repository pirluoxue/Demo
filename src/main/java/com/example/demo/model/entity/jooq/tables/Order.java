/*
 * This file is generated by jOOQ.
 */
package com.example.demo.model.entity.jooq.tables;


import com.example.demo.model.entity.jooq.Indexes;
import com.example.demo.model.entity.jooq.Keys;
import com.example.demo.model.entity.jooq.Opentogetdb;
import com.example.demo.model.entity.jooq.tables.records.OrderRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 订单表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Order extends TableImpl<OrderRecord> {

    private static final long serialVersionUID = 1217246406;

    /**
     * The reference instance of <code>opentogetdb.order</code>
     */
    public static final Order ORDER = new Order();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderRecord> getRecordType() {
        return OrderRecord.class;
    }

    /**
     * The column <code>opentogetdb.order.id</code>.
     */
    public final TableField<OrderRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>opentogetdb.order.outTradeNo</code>. 订单号
     */
    public final TableField<OrderRecord, String> OUTTRADENO = createField("outTradeNo", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "订单号");

    /**
     * The column <code>opentogetdb.order.totalAmount</code>. 订单金额
     */
    public final TableField<OrderRecord, BigDecimal> TOTALAMOUNT = createField("totalAmount", org.jooq.impl.SQLDataType.DECIMAL(5, 2), this, "订单金额");

    /**
     * The column <code>opentogetdb.order.tradeNo</code>. 支付宝订单号
     */
    public final TableField<OrderRecord, String> TRADENO = createField("tradeNo", org.jooq.impl.SQLDataType.VARCHAR(64), this, "支付宝订单号");

    /**
     * The column <code>opentogetdb.order.buyerLogonId</code>. 买家支付宝账号
     */
    public final TableField<OrderRecord, String> BUYERLOGONID = createField("buyerLogonId", org.jooq.impl.SQLDataType.VARCHAR(100), this, "买家支付宝账号");

    /**
     * The column <code>opentogetdb.order.receiptAmount</code>. 实收金额
     */
    public final TableField<OrderRecord, String> RECEIPTAMOUNT = createField("receiptAmount", org.jooq.impl.SQLDataType.VARCHAR(11), this, "实收金额");

    /**
     * The column <code>opentogetdb.order.buyerPayAmount</code>. 买家付款的金额
     */
    public final TableField<OrderRecord, BigDecimal> BUYERPAYAMOUNT = createField("buyerPayAmount", org.jooq.impl.SQLDataType.DECIMAL(5, 2), this, "买家付款的金额");

    /**
     * The column <code>opentogetdb.order.gmtPayment</code>. 交易支付时间
     */
    public final TableField<OrderRecord, Timestamp> GMTPAYMENT = createField("gmtPayment", org.jooq.impl.SQLDataType.TIMESTAMP, this, "交易支付时间");

    /**
     * The column <code>opentogetdb.order.fundChannel</code>. 交易使用的资金渠道
     */
    public final TableField<OrderRecord, String> FUNDCHANNEL = createField("fundChannel", org.jooq.impl.SQLDataType.VARCHAR(32), this, "交易使用的资金渠道");

    /**
     * The column <code>opentogetdb.order.fundAmount</code>. 该支付工具类型所使用的金额
     */
    public final TableField<OrderRecord, BigDecimal> FUNDAMOUNT = createField("fundAmount", org.jooq.impl.SQLDataType.DECIMAL(5, 2), this, "该支付工具类型所使用的金额");

    /**
     * The column <code>opentogetdb.order.buyerUserId</code>. 买家在支付宝的用户id
     */
    public final TableField<OrderRecord, String> BUYERUSERID = createField("buyerUserId", org.jooq.impl.SQLDataType.VARCHAR(32), this, "买家在支付宝的用户id");

    /**
     * The column <code>opentogetdb.order.buyerId</code>. 买家的支付宝用户Uid
     */
    public final TableField<OrderRecord, String> BUYERID = createField("buyerId", org.jooq.impl.SQLDataType.VARCHAR(32), this, "买家的支付宝用户Uid");

    /**
     * The column <code>opentogetdb.order.orderStatus</code>. 订单状态，0为未付款，1为以申请扣款但未完成，2为付款成功，3为用户无法支付
     */
    public final TableField<OrderRecord, Integer> ORDERSTATUS = createField("orderStatus", org.jooq.impl.SQLDataType.INTEGER, this, "订单状态，0为未付款，1为以申请扣款但未完成，2为付款成功，3为用户无法支付");

    /**
     * Create a <code>opentogetdb.order</code> table reference
     */
    public Order() {
        this(DSL.name("order"), null);
    }

    /**
     * Create an aliased <code>opentogetdb.order</code> table reference
     */
    public Order(String alias) {
        this(DSL.name(alias), ORDER);
    }

    /**
     * Create an aliased <code>opentogetdb.order</code> table reference
     */
    public Order(Name alias) {
        this(alias, ORDER);
    }

    private Order(Name alias, Table<OrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Order(Name alias, Table<OrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("订单表"));
    }

    public <O extends Record> Order(Table<O> child, ForeignKey<O, OrderRecord> key) {
        super(child, key, ORDER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Opentogetdb.OPENTOGETDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrderRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrderRecord> getPrimaryKey() {
        return Keys.KEY_ORDER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrderRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderRecord>>asList(Keys.KEY_ORDER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Order as(String alias) {
        return new Order(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Order as(Name alias) {
        return new Order(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(String name) {
        return new Order(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(Name name) {
        return new Order(name, null);
    }
}
