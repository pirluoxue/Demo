/*
 * This file is generated by jOOQ.
 */
package com.example.demo.model.entity.jooq.tables;


import com.example.demo.model.entity.jooq.Indexes;
import com.example.demo.model.entity.jooq.Keys;
import com.example.demo.model.entity.jooq.Yhldb;
import com.example.demo.model.entity.jooq.tables.records.UserRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 会员表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User extends TableImpl<UserRecord> {

    private static final long serialVersionUID = -1237412239;

    /**
     * The reference instance of <code>yhldb.user</code>
     */
    public static final User USER = new User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>yhldb.user.user_id</code>. 主键
     */
    public final TableField<UserRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>yhldb.user.user_key</code>. 外键
     */
    public final TableField<UserRecord, String> USER_KEY = createField("user_key", org.jooq.impl.SQLDataType.VARCHAR(32), this, "外键");

    /**
     * The column <code>yhldb.user.user_name</code>. 微信名
     */
    public final TableField<UserRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(64), this, "微信名");

    /**
     * The column <code>yhldb.user.user_openId</code>. 微信openid
     */
    public final TableField<UserRecord, String> USER_OPENID = createField("user_openId", org.jooq.impl.SQLDataType.VARCHAR(64), this, "微信openid");

    /**
     * The column <code>yhldb.user.user_password</code>. 密码
     */
    public final TableField<UserRecord, String> USER_PASSWORD = createField("user_password", org.jooq.impl.SQLDataType.VARCHAR(32), this, "密码");

    /**
     * The column <code>yhldb.user.user_phone</code>. 电话
     */
    public final TableField<UserRecord, String> USER_PHONE = createField("user_phone", org.jooq.impl.SQLDataType.VARCHAR(20), this, "电话");

    /**
     * The column <code>yhldb.user.user_amount</code>. 消费金额
     */
    public final TableField<UserRecord, Double> USER_AMOUNT = createField("user_amount", org.jooq.impl.SQLDataType.DOUBLE, this, "消费金额");

    /**
     * The column <code>yhldb.user.user_balance</code>. 余额
     */
    public final TableField<UserRecord, Double> USER_BALANCE = createField("user_balance", org.jooq.impl.SQLDataType.DOUBLE, this, "余额");

    /**
     * The column <code>yhldb.user.user_point</code>. 积分
     */
    public final TableField<UserRecord, Integer> USER_POINT = createField("user_point", org.jooq.impl.SQLDataType.INTEGER, this, "积分");

    /**
     * The column <code>yhldb.user.user_bindDate</code>. 关注日期
     */
    public final TableField<UserRecord, Timestamp> USER_BINDDATE = createField("user_bindDate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "关注日期");

    /**
     * The column <code>yhldb.user.user_birth</code>. 出生日期
     */
    public final TableField<UserRecord, Timestamp> USER_BIRTH = createField("user_birth", org.jooq.impl.SQLDataType.TIMESTAMP, this, "出生日期");

    /**
     * The column <code>yhldb.user.user_email</code>. e-mail
     */
    public final TableField<UserRecord, String> USER_EMAIL = createField("user_email", org.jooq.impl.SQLDataType.VARCHAR(255), this, "e-mail");

    /**
     * The column <code>yhldb.user.user_gender</code>. 性别
     */
    public final TableField<UserRecord, String> USER_GENDER = createField("user_gender", org.jooq.impl.SQLDataType.VARCHAR(4), this, "性别");

    /**
     * The column <code>yhldb.user.user_address</code>. 地址
     */
    public final TableField<UserRecord, String> USER_ADDRESS = createField("user_address", org.jooq.impl.SQLDataType.VARCHAR(255), this, "地址");

    /**
     * The column <code>yhldb.user.user_isEnabled</code>. 是否启用
     */
    public final TableField<UserRecord, Integer> USER_ISENABLED = createField("user_isEnabled", org.jooq.impl.SQLDataType.INTEGER, this, "是否启用");

    /**
     * The column <code>yhldb.user.user_loginDate</code>. 最后登录日期
     */
    public final TableField<UserRecord, Timestamp> USER_LOGINDATE = createField("user_loginDate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "最后登录日期");

    /**
     * The column <code>yhldb.user.user_remarks</code>. 备注信息
     */
    public final TableField<UserRecord, String> USER_REMARKS = createField("user_remarks", org.jooq.impl.SQLDataType.VARCHAR(255), this, "备注信息");

    /**
     * The column <code>yhldb.user.user_useTotal</code>. 用户次数
     */
    public final TableField<UserRecord, Integer> USER_USETOTAL = createField("user_useTotal", org.jooq.impl.SQLDataType.INTEGER, this, "用户次数");

    /**
     * The column <code>yhldb.user.user_uname</code>. 用户姓名
     */
    public final TableField<UserRecord, String> USER_UNAME = createField("user_uname", org.jooq.impl.SQLDataType.VARCHAR(64), this, "用户姓名");

    /**
     * The column <code>yhldb.user.user_qdKey</code>. 渠道key
     */
    public final TableField<UserRecord, String> USER_QDKEY = createField("user_qdKey", org.jooq.impl.SQLDataType.VARCHAR(32), this, "渠道key");

    /**
     * The column <code>yhldb.user.user_cdKey</code>. 场地key
     */
    public final TableField<UserRecord, String> USER_CDKEY = createField("user_cdKey", org.jooq.impl.SQLDataType.VARCHAR(32), this, "场地key");

    /**
     * The column <code>yhldb.user.user_devCode</code>. 设备号
     */
    public final TableField<UserRecord, String> USER_DEVCODE = createField("user_devCode", org.jooq.impl.SQLDataType.VARCHAR(64), this, "设备号");

    /**
     * The column <code>yhldb.user.user_secondCdKey</code>. 二级场地key
     */
    public final TableField<UserRecord, String> USER_SECONDCDKEY = createField("user_secondCdKey", org.jooq.impl.SQLDataType.VARCHAR(32), this, "二级场地key");

    /**
     * The column <code>yhldb.user.user_fromType</code>. 用户来源，1微信2支付宝
     */
    public final TableField<UserRecord, String> USER_FROMTYPE = createField("user_fromType", org.jooq.impl.SQLDataType.VARCHAR(2).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "用户来源，1微信2支付宝");

    /**
     * The column <code>yhldb.user.user_joinTime</code>. 加入时间
     */
    public final TableField<UserRecord, Timestamp> USER_JOINTIME = createField("user_joinTime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "加入时间");

    /**
     * The column <code>yhldb.user.user_createTime</code>. 创建时间
     */
    public final TableField<UserRecord, Timestamp> USER_CREATETIME = createField("user_createTime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间");

    /**
     * The column <code>yhldb.user.user_updateTime</code>. 更新时间
     */
    public final TableField<UserRecord, Timestamp> USER_UPDATETIME = createField("user_updateTime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * Create a <code>yhldb.user</code> table reference
     */
    public User() {
        this(DSL.name("user"), null);
    }

    /**
     * Create an aliased <code>yhldb.user</code> table reference
     */
    public User(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>yhldb.user</code> table reference
     */
    public User(Name alias) {
        this(alias, USER);
    }

    private User(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("会员表"));
    }

    public <O extends Record> User(Table<O> child, ForeignKey<O, UserRecord> key) {
        super(child, key, USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Yhldb.YHLDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.KEY_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRecord>>asList(Keys.KEY_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public User as(String alias) {
        return new User(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public User as(Name alias) {
        return new User(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(String name) {
        return new User(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(Name name) {
        return new User(name, null);
    }
}
